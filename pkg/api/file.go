package api

import (
	"github.com/dave/jennifer/jen"
	"go/types"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"path/filepath"
)

func CreateJenFile(obj *types.Object) *jen.File {
	var file = jen.NewFilePathName((*obj).Pkg().Path(), (*obj).Pkg().Name())
	file.PackageComment("// Code generated by github.com/pschichtel/auto-marshal! DO NOT EDIT.")
	return file
}

func DeriveOutputFileName(sourceFile string, obj *types.Object) string {
	sourceFileExt := filepath.Ext(sourceFile)
	return sourceFile[0:len(sourceFile)-len(sourceFileExt)] + "_" + (*obj).Name() + "_generated" + sourceFileExt
}

const ValueVariableName = "value"
const WriterVariableName = "writer"
const FirstVariableName = "first"

func EncoderFunctionNameForNamedType(typeName string) string {
	return "JsonEncode" + typeName
}

func EncoderFunctionParams(structName string) []jen.Code {
	return []jen.Code{
		jen.Id(ValueVariableName).Op("*").Id(structName),
		jen.Id(WriterVariableName).Op("*").Qual("github.com/mailru/easyjson/jwriter", "Writer"),
	}
}

func GenerateMarshalFunction(file *jen.File, obj *types.Object) {
	receiverName := "subject"
	structName := (*obj).Name()
	file.Func().Params(jen.Id(receiverName).Op("*").Id(structName)).Id("MarshalJSON").Params().Params(jen.Op("[]").Byte(), jen.Error()).Block(
		jen.Return(jen.Qual("github.com/pschichtel/auto-marshal/pkg/api/encoder", "EncodeJson").Call(jen.Id(receiverName), jen.Id(EncoderFunctionNameForNamedType(structName)))),
	).Line()
}

func WriterFunctionForBasicType(basicType *types.Basic) string {
	return cases.Title(language.English, cases.Compact).String(basicType.Name())
}

func WriteNilAndReturnIfValueIsNil() jen.Code {
	return jen.If(jen.Id(ValueVariableName).Op("==").Nil()).Block(
		jen.Id(WriterVariableName).Dot("RawString").Call(jen.Lit("null")),
		jen.Return(jen.Nil()),
	)
}
