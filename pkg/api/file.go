package api

import (
	"github.com/dave/jennifer/jen"
	"go/types"
	"path/filepath"
)

func CreateJenFile(obj *types.Object) *jen.File {
	var file = jen.NewFilePathName((*obj).Pkg().Path(), (*obj).Pkg().Name())
	file.PackageComment("// Code generated by github.com/pschichtel/auto-marshal! DO NOT EDIT.")
	return file
}

func DeriveOutputFileName(sourceFile string, obj *types.Object) string {
	sourceFileExt := filepath.Ext(sourceFile)
	return sourceFile[0:len(sourceFile)-len(sourceFileExt)] + "_" + (*obj).Name() + "_generated" + sourceFileExt
}

func GenerateAuxErrorType(file *jen.File, obj *types.Object) string {
	typeName := "aux" + (*obj).Name() + "Error"
	receiverName := "e"
	file.Type().Id(typeName).String().Line()

	file.Func().Params(jen.Id(receiverName).Id(typeName)).Id("Error").Params().Params(jen.String()).Block(
		jen.Return(jen.String().Call(jen.Id(receiverName))),
	).Line()

	return typeName
}

const ValueVariableName = "value"
const WriterVariableName = "writer"
const FirstVariableName = "first"

func EncoderFunctionNameForNamedType(typeName string) string {
	return "JsonEncode" + typeName
}

func EncoderFunctionParams(structName string) []jen.Code {
	return []jen.Code{
		jen.Id(ValueVariableName).Op("*").Id(structName),
		jen.Id(WriterVariableName).Op("*").Qual("github.com/mailru/easyjson/jwriter", "Writer"),
	}
}
